{
  "_args": [
    [
      "yuicompressor",
      "C:\\Users\\DD"
    ]
  ],
  "_from": "yuicompressor@latest",
  "_id": "yuicompressor@2.4.8",
  "_inCache": true,
  "_installable": true,
  "_location": "/yuicompressor",
  "_npmUser": {
    "email": "joeysmith@gmail.com",
    "name": "tml"
  },
  "_npmVersion": "1.2.18",
  "_phantomChildren": {},
  "_requested": {
    "name": "yuicompressor",
    "raw": "yuicompressor",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/yuicompressor/-/yuicompressor-2.4.8.tgz",
  "_shasum": "98d26751f166e3db919b2fe3ea7cf642de998d8b",
  "_shrinkwrap": null,
  "_spec": "yuicompressor",
  "_where": "C:\\Users\\DD",
  "author": {
    "email": "julien.lecomte@gmail.com",
    "name": "Julien Lecomte"
  },
  "bin": {
    "yuicompressor": "./nodejs/cli.js"
  },
  "bugs": {
    "url": "http://yuilibrary.com/projects/yuicompressor/newticket"
  },
  "contributors": [
    {
      "email": "davglass@gmail.com",
      "name": "Dav Glass"
    },
    {
      "email": "joeysmith@gmail.com",
      "name": "Joey Smith"
    },
    {
      "email": "assttoo@ymail.com",
      "name": "Stoyan Stefanov"
    }
  ],
  "dependencies": {},
  "description": "YUICompressor CLI and Node.js require",
  "devDependencies": {
    "yuitest": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "98d26751f166e3db919b2fe3ea7cf642de998d8b",
    "tarball": "https://registry.npmjs.org/yuicompressor/-/yuicompressor-2.4.8.tgz"
  },
  "files": [
    "build/*.jar",
    "nodejs"
  ],
  "homepage": "https://github.com/yui/yuicompressor#readme",
  "keywords": [
    "yui",
    "compressor",
    "munger",
    "cssmin",
    "minify",
    "minification"
  ],
  "licenses": [
    {
      "type": "BSD",
      "url": "http://yuilibrary.com/license/"
    }
  ],
  "main": "./nodejs/index.js",
  "maintainers": [
    {
      "email": "davglass@gmail.com",
      "name": "davglass"
    },
    {
      "email": "joeysmith@gmail.com",
      "name": "tml"
    }
  ],
  "name": "yuicompressor",
  "optionalDependencies": {},
  "readme": "YUI Compressor - The Yahoo! JavaScript and CSS Compressor\n=========================================================\n\nThe YUI Compressor is a JavaScript compressor which, in addition to removing\ncomments and white-spaces, obfuscates local variables using the smallest\npossible variable name. This obfuscation is safe, even when using constructs\nsuch as 'eval' or 'with' (although the compression is not optimal is those\ncases) Compared to jsmin, the average savings is around 20%.\n\nThe YUI Compressor is also able to safely compress CSS files. The decision\non which compressor is being used is made on the file extension (js or css)\n\nBuilding\n--------\n\n    ant\n\nTesting\n-------\n\n    ./tests/suite.sh\n\n\nNode.js Package\n---------------\n\nYou can require compressor in a Node.js package and compress files and strings in async.\n_It still uses Java under the hood_\n\n    npm i yuicompressor\n\n```javascript\n\nvar compressor = require('yuicompressor');\n\ncompressor.compress('/path/to/file or String of JS', {\n    //Compressor Options:\n    charset: 'utf8',\n    type: 'js',\n    nomunge: true,\n    'line-break': 80\n}, function(err, data, extra) {\n    //err   If compressor encounters an error, it's stderr will be here\n    //data  The compressed string, you write it out where you want it\n    //extra The stderr (warnings are printed here in case you want to echo them\n});\n\n```\n\nOptions:\n* `charset` // defaults to 'utf8'\n* `type` // defaults to 'js'\n* `line-break`\n* `nomunge`\n* `preserve-semi`\n* `disable-optimizations`\n\n\nTODO\n----\n\n* Better Docs\n* Help Pages\n\nBuild Status\n------------\n\n[![Build Status](https://secure.travis-ci.org/yui/yuicompressor.png?branch=master)](http://travis-ci.org/yui/yuicompressor)\n\n\nGlobal Options\n--------------\n\n    -h, --help\n        Prints help on how to use the YUI Compressor\n\n    --line-break\n        Some source control tools don't like files containing lines longer than,\n        say 8000 characters. The linebreak option is used in that case to split\n        long lines after a specific column. It can also be used to make the code\n        more readable, easier to debug (especially with the MS Script Debugger)\n        Specify 0 to get a line break after each semi-colon in JavaScript, and\n        after each rule in CSS.\n\n    --type js|css\n        The type of compressor (JavaScript or CSS) is chosen based on the\n        extension of the input file name (.js or .css) This option is required\n        if no input file has been specified. Otherwise, this option is only\n        required if the input file extension is neither 'js' nor 'css'.\n\n    --charset character-set\n        If a supported character set is specified, the YUI Compressor will use it\n        to read the input file. Otherwise, it will assume that the platform's\n        default character set is being used. The output file is encoded using\n        the same character set.\n\n    -o outfile\n\n        Place output in file outfile. If not specified, the YUI Compressor will\n        default to the standard output, which you can redirect to a file.\n        Supports a filter syntax for expressing the output pattern when there are\n        multiple input files.  ex:\n            java -jar yuicompressor.jar -o '.css$:-min.css' *.css\n        ... will minify all .css files and save them as -min.css\n\n    -v, --verbose\n        Display informational messages and warnings.\n\nJavaScript Only Options\n-----------------------\n\n    --nomunge\n        Minify only. Do not obfuscate local symbols.\n\n    --preserve-semi\n        Preserve unnecessary semicolons (such as right before a '}') This option\n        is useful when compressed code has to be run through JSLint (which is the\n        case of YUI for example)\n\n    --disable-optimizations\n        Disable all the built-in micro optimizations.\n\nNotes\n-----\n\n* If no input file is specified, it defaults to stdin.\n\n* Supports wildcards for specifying multiple input files.\n\n* The YUI Compressor requires Java version >= 1.5.\n\n* It is possible to prevent a local variable, nested function or function\nargument from being obfuscated by using \"hints\". A hint is a string that\nis located at the very beginning of a function body like so:\n    \n```\nfunction fn (arg1, arg2, arg3) {\n    \"arg2:nomunge, localVar:nomunge, nestedFn:nomunge\";\n\n    ...\n    var localVar;\n    ...\n\n    function nestedFn () {\n        ....\n    }\n\n    ...\n}\n```\nThe hint itself disappears from the compressed file.\n\n* C-style comments starting with `/*!` are preserved. This is useful with\n    comments containing copyright/license information. For example:\n\n```\n/*!\n * TERMS OF USE - EASING EQUATIONS\n * Open source under the BSD License.\n * Copyright 2001 Robert Penner All rights reserved.\n */\n```\n\nbecomes:\n\n```\n/*\n * TERMS OF USE - EASING EQUATIONS\n * Open source under the BSD License.\n * Copyright 2001 Robert Penner All rights reserved.\n */\n```\n\nModified Rhino Files\n--------------------\n\nYUI Compressor uses a modified version of the Rhino library\n(http://www.mozilla.org/rhino/) The changes were made to support\nJScript conditional comments, preserved comments, unescaped slash\ncharacters in regular expressions, and to allow for the optimization\nof escaped quotes in string literals.\n\nCopyright And License\n---------------------\n\nCopyright (c) 2013 Yahoo! Inc.  All rights reserved.\nThe copyrights embodied in the content of this file are licensed\nby Yahoo! Inc. under the BSD (revised) open source license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yui/yuicompressor.git"
  },
  "scripts": {
    "test": "yuitest ./nodejs_tests/tests.js"
  },
  "version": "2.4.8"
}
